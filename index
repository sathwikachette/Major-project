<html>

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chicken Feeder Control</title>
    <style>
        :root {
            --primary: #4CAF50;
            --secondary: #f44336;
        }

        * {
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 15px;
            background: #f5f5f5;
        }

        .card {
            background: white;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 15px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .status-item {
            display: flex;
            justify-content: space-between;
            padding: 10px 0;
            border-bottom: 1px solid #eee;
        }

        .btn {
            padding: 8px 15px;
            border: none;
            border-radius: 5px;
            color: white;
            cursor: pointer;
        }

        .primary {
            background: var(--primary);
        }

        .secondary {
            background: var(--secondary);
        }

        .switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: #ccc;
            transition: .4s;
            border-radius: 34px;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked+.slider {
            background: var(--primary);
        }

        input:checked+.slider:before {
            transform: translateX(26px);
        }

        #feedTimesList {
            margin-top: 15px;
        }

        .feed-time-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            background: #f8f8f8;
            margin-bottom: 5px;
            border-radius: 5px;
        }

        .status-safe {
            color: green;
            font-weight: bold;
        }

        .status-alert {
            color: red;
            font-weight: bold;
        }
    </style>
</head>

<body>
    <div id="currentTime" style="position: absolute; top: 15px; right: 15px; font-size: 18px; font-weight: bold;"></div>

    <div class="card">
        <h2>Sensor Status</h2>
        <div>
            <h3>PIR Sensor Status: <span id="pirStatus">SAFE</span></h3>
            <h3>LDR Sensor Status: <span id="ldrStatus">Dark</span></h3>
            <h3>Soil Moisture: <span id="soilStatus">Dry</span></h3>
        </div>
    </div>

    <div class="card">
        <h2>Feed Schedule</h2>
        <div id="feedTimesList"></div>
        <input type="time" id="feedTime" class="card">
        <input type="number" id="duration" placeholder="Duration (sec)" min="1" class="card">
        <button onclick="addFeedTime()" class="btn primary">Add Schedule</button>
    </div>

    <div class="card">
        <h2>Controls</h2>
        <div class="status-item">
            <span>PIR Sensor (Buzzer Alert)</span>
            <label class="switch">
                <input type="checkbox" id="pirSwitch" checked onchange="updateSettings()">
                <span class="slider"></span>
            </label>
        </div>
    </div>

    <div class="card">
        <h2>Set RTC</h2>
        <button onclick="setRTC()" class="btn primary">Set RTC to Browser Time</button>
    </div>

    <script>
        async function deleteTime(index) {
            const formData = new FormData();
            formData.append('index', index);

            const response = await fetch('/delete-feedtime', {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                loadFeedTimes();
            }
        }

        async function setRTC() {
            // Get current browser time
            const now = new Date();
            const year = now.getFullYear();
            const month = ('0' + (now.getMonth() + 1)).slice(-2);
            const day = ('0' + now.getDate()).slice(-2);
            const hour = ('0' + now.getHours()).slice(-2);
            const minute = ('0' + now.getMinutes()).slice(-2);
            const second = ('0' + now.getSeconds()).slice(-2);
            const datetime = `${year}-${month}-${day} ${hour}:${minute}:${second}`;

            const response = await fetch(`/set-rtc`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: `datetime=${encodeURIComponent(datetime)}`
            });
        }

        async function updateStatus() {
            const res = await fetch('/status');
            const data = await res.json();

            // Check if data.pir exists and update PIR sensor status
            const pirStatusElement = document.getElementById('pirStatus');
            if (data.pir) {
                pirStatusElement.textContent = 'ALERT';
                pirStatusElement.style.color = 'red';  // Set color to red for ALERT
            } else {
                pirStatusElement.textContent = 'SAFE';
                pirStatusElement.style.color = 'green';  // Set color to green for SAFE
            }

            // Check if the LDR value exists, and handle status
            const ldrStatusElement = document.getElementById('ldrStatus');
            if (data.ldr !== undefined) {
                if (data.ldr === "Bright") {  // If LDR is Bright, set to yellow
                    ldrStatusElement.textContent = 'Bright';
                    ldrStatusElement.style.color = 'rgb(255, 165, 0)';
                } else if (data.ldr === "Dark") {  // If LDR is Dark, set to gray
                    ldrStatusElement.textContent = 'Dark';
                    ldrStatusElement.style.color = 'gray';
                } else {
                    ldrStatusElement.textContent = 'Unknown';  // Fallback case
                    ldrStatusElement.style.color = 'black';  // Default color
                }
            } else {
                ldrStatusElement.textContent = 'Error';  // If LDR data is missing
                ldrStatusElement.style.color = 'orange';
            }

            // Update Soil Moisture status
            document.getElementById('soilStatus').textContent = data.soilMoisture;
        }

        async function addFeedTime() {
            const time = document.getElementById('feedTime').value;
            const [hour, minute] = time.split(':');
            const duration = document.getElementById('duration').value;

            const formData = new FormData();
            formData.append('hour', hour);
            formData.append('minute', minute);
            formData.append('duration', duration);

            if (!duration || duration <= 0) {
                alert("Error: Duration must be greater than zero!");
                return;
            }

            const response = await fetch('/add-feedtime', {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                loadFeedTimes(); // Refresh the schedule list
            }
        }

        async function loadFeedTimes() {
            const res = await fetch('/get-feedtimes');
            const times = await res.json();
            const list = document.getElementById('feedTimesList');
            list.innerHTML = times.map((time, index) => `
	        <div class="feed-time-item">
	            <span>${time.hour}:${time.minute} - ${time.duration}s</span>
	            <div>
	                <button onclick="deleteTime(${index})" class="btn secondary">Delete</button>
	            </div>
	        </div>
	    `).join('');
        }


        async function updateSettings() {
            const pir = document.getElementById('pirSwitch').checked ? "true" : "false";

            const formData = new FormData();
            formData.append('pir', pir);
            const response = await fetch('/settings', {
                method: 'POST',
                body: formData
            });
            const result = await response.text();
            updateStatus(); // Refresh status in case soil sensor state changed

        }

        // Fetch current settings and update UI on page load
        async function loadSettings() {
            try {
                const response = await fetch('/get-settings', {
                    method: 'GET'
                });
                const settings = await response.json();

                // Update UI with the fetched settings
                document.getElementById('pirSwitch').checked = settings.pir;
            } catch (error) {
                console.error("Error loading settings:", error);
            }
        }

        async function toggleLamp() {
            const lampSwitch = document.getElementById('lampSwitch');
            const newState = lampSwitch.checked;
            const formData = new FormData();
            formData.append('state', newState);

            const response = await fetch('/toggle-lamp', {
                method: 'POST',
                body: formData
            });
            const result = await response.text();
            updateStatus();
        }

        async function updateTimeFromESP() {
            const response = await fetch('/get-time'); // Request the time from the ESP8266
            const espTime = await response.text(); // Get the time in HH:MM:SS format
            document.getElementById('currentTime').textContent = espTime; // Update the time on the page
        }

        setInterval(updateTimeFromESP, 1000);
    </script>
</body>

</html>